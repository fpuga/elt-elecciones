#!/bin/bash

# set -e: stops the script on error
# set -u: stops the script on unset variables
# set -o pipefail:  fail the whole pipeline on first error
# https://www.howtogeek.com/782514/how-to-use-set-and-pipefail-in-bash-scripts-on-linux/
# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
# https://superuser.com/questions/648331/how-to-properly-restore-settings-when-running-a-script-using-source
SAVED_OPTIONS=$(set +o)
set -euo pipefail

# Debug
# set -x # source variables.ini 2> log.txt


# If DEPLOYMENT (enviroment variable) is null or unset, set it to DEV. To avoid
# unbout (-u) error
# TODO: It will be better set default value to PROD
DEPLOYMENT="${DEPLOYMENT:=DEV}"


if [[ "${DEPLOYMENT}" != "DEV" ]] && [[ "${DEPLOYMENT}" != "PROD" ]] && [[ "${DEPLOYMENT}" != "STAGE" ]] ; then
    echo "First argument must be a valid DEPLOYMENT value: DEV | PROD | STAGE"
    echo "Current value ${DEPLOYMENT}"
    return 1
fi


PROJECT_NAME=elecciones
LOCALE="es_ES.UTF-8"
MY_TIMEZONE="Europe/Madrid"
MY_HOSTNAME="${MY_HOSTNAME:=${PROJECT_NAME}}"

if [[ "${DEPLOYMENT}" == "DEV" ]] ; then
    SSH_PORT=22
    if id -u "vagrant" >/dev/null 2>&1; then
        DEFAULT_USER=vagrant
    else
        DEFAULT_USER=$(whoami)
        # echo "Vagrant user does not exists. Using: ${DEFAULT_USER}" 1>&2
    fi
else
    SSH_PORT="${SSH_PORT:=10000}"
    : "${DEFAULT_USER:=${DEFAULT_USER}}"
fi

# Works in Vagrant because we make cd /vagrant/server in bootstrap.sh
_this_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"
SETTINGS="${_this_dir}"


if [[ "${OSTYPE}" == "darwin"* ]]; then
    OS_CODENAME="osx"
    DEFAULT_USER_HOME=$(dscacheutil -q user -a name "${DEFAULT_USER}" | awk '($1 == "dir:") { print $2 }')
else
    OS_CODENAME=$(lsb_release -cs)
    DEFAULT_USER_HOME=$(getent passwd "${DEFAULT_USER}" | cut -d: -f6)
fi



INSTALL_PYTHON_FROM=pyenv
PYTHON_VERSION=3.11.3

TODAY=$(date '+%y%m%d')



#
# Enabled filters, uncomment the ones you would like to use
#
declare -a ACTIVE_JAILS=(
    "SSHD"                  # Bans hosts with multiple failed login attempts
##    "APACHE_AUTH"           # Bans hosts with multiple failed login attempts
#    "APACHE_BADBOTS"        # Stops some known malicious bot request patterns
#    "APACHE_BOTSEARCH"      # Blocks hosts trying to access non-existent URL's
#    "APACHE_FAKEGOOGLEBOT"  # Filters fake Googlebot User Agents see: https://johnmu.com/fake-googlebots/
#    "APACHE_OVERFLOWS"      # Blocks clients who are attempting to request unusually long and suspicious URLs
#    "APACHE_SHELLSHOCK"     # Blocks Shellshock exploit attempts see: https://blog.cloudflare.com/inside-shellshock/
##    "APACHE_MODSECURITY"    # Bans hosts based on Apache's security module log errors
##    "APACHE_NOHOME"         # Can be enabled if you do not use Apache to provide access to web content within
                                # usersâ€™ home directories
##    "APACHE_NOSCRIPT"       # Bans clients searching for scripts on the website to execute and exploit. If you do
                                # not use PHP or any other language in your web server, you can enable this jail
##    "APACHE_PASS"           #
##    "REDMINE"               # Bans hosts with multiple failed login attempts
##    "WORDPRESS"             # Bans hosts with multiple failed login attempts
##    "POSTGRESQL"            # Bans hosts with multiple failed login attempts
)


eval "${SAVED_OPTIONS}"
unset SAVED_OPTIONS
unset _this_dir
